-- ðŸ“Œ Query 1: Most Rated Books
-- This query identifies the most popular books based on the number of ratings.
SELECT 
    b.ISBN, 
    b."Book-Title", 
    b."Book-Author", 
    COUNT(r."Book-Rating") AS num_ratings
FROM ratings r
JOIN books b ON r.ISBN = b.ISBN
WHERE r."Book-Rating" > 0
GROUP BY b.ISBN, b."Book-Title", b."Book-Author"
ORDER BY num_ratings DESC
LIMIT 10;

-- ðŸ“Œ Query 2: Highest Rated Books (Weighted Score)
-- This query calculates a weighted rating using a Bayesian average formula to fairly rank books.
WITH rating_stats AS (
    SELECT 
        ISBN,
        COUNT(book_rating) AS num_ratings,
        AVG(book_rating) AS avg_rating
    FROM ratings
    WHERE book_rating > 0
    GROUP BY ISBN
), global_avg AS (
    SELECT 
        AVG(avg_rating)::NUMERIC AS C,  
        PERCENTILE_CONT(0.8) WITHIN GROUP (ORDER BY num_ratings)::NUMERIC AS m  
    FROM rating_stats  
)
SELECT 
    b.ISBN, 
    b.book_title, 
    b.book_author, 
    rs.num_ratings, 
    ROUND(rs.avg_rating::NUMERIC, 2) AS avg_rating,  
    ROUND(((rs.num_ratings / (rs.num_ratings + g.m) * rs.avg_rating) + 
          (g.m / (rs.num_ratings + g.m) * g.C))::NUMERIC, 2) AS weighted_score  
FROM rating_stats rs  
JOIN books b ON rs.ISBN = b.ISBN 
CROSS JOIN global_avg g  
ORDER BY weighted_score DESC  
LIMIT 10;

-- ðŸ“Œ Query 3: Determine Minimum Ratings Threshold
-- This query finds the appropriate percentile (m) that ensures books have at least 5 ratings.
SELECT 
    PERCENTILE_DISC(0.8) WITHIN GROUP (ORDER BY num_ratings) AS p80, 
    PERCENTILE_DISC(0.85) WITHIN GROUP (ORDER BY num_ratings) AS p85, 
    PERCENTILE_DISC(0.9) WITHIN GROUP (ORDER BY num_ratings) AS p90, 
    PERCENTILE_DISC(0.95) WITHIN GROUP (ORDER BY num_ratings) AS p95 
FROM ( 
    SELECT COUNT(book_rating) AS num_ratings 
    FROM ratings 
    GROUP BY isbn 
) rating_counts;
